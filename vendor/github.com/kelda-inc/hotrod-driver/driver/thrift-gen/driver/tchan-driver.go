// @generated Code generated by thrift-gen. Do not modify.

// Package driver is generated code used to make or handle TChannel calls using Thrift.
package driver

import (
	"fmt"

	athrift "github.com/apache/thrift/lib/go/thrift"
	"github.com/uber/tchannel-go/thrift"
)

// Interfaces for the service and client for the services defined in the IDL.

// TChanDriver is the interface that defines the server handler and client interface.
type TChanDriver interface {
	FindNearest(ctx thrift.Context, location string) ([]*DriverLocation, error)
	Lock(ctx thrift.Context, id string) (*Result_, error)
	Unlock(ctx thrift.Context, id string) (*Result_, error)
}

// Implementation of a client and service handler.

type tchanDriverClient struct {
	thriftService string
	client        thrift.TChanClient
}

func NewTChanDriverInheritedClient(thriftService string, client thrift.TChanClient) *tchanDriverClient {
	return &tchanDriverClient{
		thriftService,
		client,
	}
}

// NewTChanDriverClient creates a client that can be used to make remote calls.
func NewTChanDriverClient(client thrift.TChanClient) TChanDriver {
	return NewTChanDriverInheritedClient("Driver", client)
}

func (c *tchanDriverClient) FindNearest(ctx thrift.Context, location string) ([]*DriverLocation, error) {
	var resp DriverFindNearestResult
	args := DriverFindNearestArgs{
		Location: location,
	}
	success, err := c.client.Call(ctx, c.thriftService, "findNearest", &args, &resp)
	if err == nil && !success {
		switch {
		default:
			err = fmt.Errorf("received no result or unknown exception for findNearest")
		}
	}

	return resp.GetSuccess(), err
}

func (c *tchanDriverClient) Lock(ctx thrift.Context, id string) (*Result_, error) {
	var resp DriverLockResult
	args := DriverLockArgs{
		ID: id,
	}
	success, err := c.client.Call(ctx, c.thriftService, "lock", &args, &resp)
	if err == nil && !success {
		switch {
		default:
			err = fmt.Errorf("received no result or unknown exception for lock")
		}
	}

	return resp.GetSuccess(), err
}

func (c *tchanDriverClient) Unlock(ctx thrift.Context, id string) (*Result_, error) {
	var resp DriverUnlockResult
	args := DriverUnlockArgs{
		ID: id,
	}
	success, err := c.client.Call(ctx, c.thriftService, "unlock", &args, &resp)
	if err == nil && !success {
		switch {
		default:
			err = fmt.Errorf("received no result or unknown exception for unlock")
		}
	}

	return resp.GetSuccess(), err
}

type tchanDriverServer struct {
	handler TChanDriver
}

// NewTChanDriverServer wraps a handler for TChanDriver so it can be
// registered with a thrift.Server.
func NewTChanDriverServer(handler TChanDriver) thrift.TChanServer {
	return &tchanDriverServer{
		handler,
	}
}

func (s *tchanDriverServer) Service() string {
	return "Driver"
}

func (s *tchanDriverServer) Methods() []string {
	return []string{
		"findNearest",
		"lock",
		"unlock",
	}
}

func (s *tchanDriverServer) Handle(ctx thrift.Context, methodName string, protocol athrift.TProtocol) (bool, athrift.TStruct, error) {
	switch methodName {
	case "findNearest":
		return s.handleFindNearest(ctx, protocol)
	case "lock":
		return s.handleLock(ctx, protocol)
	case "unlock":
		return s.handleUnlock(ctx, protocol)

	default:
		return false, nil, fmt.Errorf("method %v not found in service %v", methodName, s.Service())
	}
}

func (s *tchanDriverServer) handleFindNearest(ctx thrift.Context, protocol athrift.TProtocol) (bool, athrift.TStruct, error) {
	var req DriverFindNearestArgs
	var res DriverFindNearestResult

	if err := req.Read(protocol); err != nil {
		return false, nil, err
	}

	r, err :=
		s.handler.FindNearest(ctx, req.Location)

	if err != nil {
		return false, nil, err
	} else {
		res.Success = r
	}

	return err == nil, &res, nil
}

func (s *tchanDriverServer) handleLock(ctx thrift.Context, protocol athrift.TProtocol) (bool, athrift.TStruct, error) {
	var req DriverLockArgs
	var res DriverLockResult

	if err := req.Read(protocol); err != nil {
		return false, nil, err
	}

	r, err :=
		s.handler.Lock(ctx, req.ID)

	if err != nil {
		return false, nil, err
	} else {
		res.Success = r
	}

	return err == nil, &res, nil
}

func (s *tchanDriverServer) handleUnlock(ctx thrift.Context, protocol athrift.TProtocol) (bool, athrift.TStruct, error) {
	var req DriverUnlockArgs
	var res DriverUnlockResult

	if err := req.Read(protocol); err != nil {
		return false, nil, err
	}

	r, err :=
		s.handler.Unlock(ctx, req.ID)

	if err != nil {
		return false, nil, err
	} else {
		res.Success = r
	}

	return err == nil, &res, nil
}
