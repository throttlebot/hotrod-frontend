// Code generated by go-bindata.
// sources:
// web_assets/index.html
// DO NOT EDIT!

package frontend

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _web_assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x7b\x6f\xdb\x38\x12\xff\xdf\x9f\x62\xa0\xed\x55\xf6\x39\x7a\x38\x8e\x63\xd7\xb1\xbc\xc8\xc5\xd9\x24\x7d\xa5\x75\xd2\x76\x7b\x8b\xa2\xa0\xc4\xb1\x44\x47\x22\x55\x92\xf2\x63\x83\x7c\xf7\x03\x25\xd9\xb1\xd3\xf6\xb0\x7f\xee\x1a\x50\x42\xce\x0c\x67\xe6\x37\x2f\x4a\xa3\x44\x67\xe9\xb8\x01\x30\xca\x50\x13\x88\x12\x22\x15\xea\xc0\xba\xba\xb9\x76\x06\x83\xde\x0b\xa7\x63\x3d\x72\x39\xc9\x30\xb0\x16\x0c\x97\xb9\x90\xda\x82\x48\x70\x8d\x5c\x07\xd6\x92\x51\x9d\x04\x14\x17\x2c\x42\xa7\xdc\x1c\x00\xe3\x4c\x33\x92\x3a\x2a\x22\x29\x06\x1d\xd7\x3f\x80\x8c\xac\x58\x56\x64\xbb\xa4\x42\xa1\x2c\xf7\x24\x4c\x31\xf0\x2b\x63\x09\x12\x6a\x16\x00\x23\xcd\x74\x8a\xe3\x4b\xa1\xa7\xd7\x13\x70\x60\xca\x28\x2a\xb8\xe6\x30\xc1\x8c\x70\x3a\xf2\x2a\x7e\x25\xab\x22\xc9\x72\x0d\x4a\x46\x81\x95\x68\x9d\xab\xa1\xe7\x45\x82\xa2\x3b\xff\x56\xa0\x5c\xbb\x91\xc8\xbc\x6a\xe9\x74\xdd\x8e\xdb\x71\x33\xc6\xdd\xb9\xb2\xc6\x23\xaf\x3a\x5a\xeb\x49\x19\xbf\x03\x89\x69\x60\x29\xbd\x4e\x51\x25\x88\xda\x82\x44\xe2\xec\x51\x6f\x46\x56\x11\xe5\x6e\x28\x84\x56\x5a\x92\xdc\x6c\x8c\xfe\x2d\xc1\xeb\xba\x5d\xb7\xef\x45\x4a\x3d\xd2\x4a\x83\x91\x52\x16\x30\xae\x31\x96\x4c\xaf\x03\x4b\x25\xa4\x3b\x38\x72\xfe\xf3\xf1\x33\x63\x37\x57\xbf\xe1\xab\x0e\xbd\xc8\x5e\x4e\x4f\xef\xd6\x51\x71\x79\x7a\x39\x8d\xbb\x87\xd7\xd9\x87\x68\xb9\xec\x0b\xde\x9d\x7e\xa6\xf1\xd1\x47\xd2\x7e\x97\xdd\xdc\xaa\x3f\xbd\x57\xc7\x83\x45\x48\xcf\xe7\xc9\x51\x61\x41\x24\x85\x52\x42\xb2\x98\xf1\xc0\x22\x5c\xf0\x75\x26\x0a\x65\xfd\x9f\xe0\xfc\x55\x10\xf3\xa7\x18\xe6\x3f\x84\x70\x1b\xf5\xae\xde\xb3\xd0\x3f\xec\x7f\x5b\xac\xe7\x37\x6f\x66\x97\xf3\xeb\x37\xe4\xf5\xdd\xac\xf8\xf4\x71\xf5\xdf\xd5\x87\x77\xfc\xec\xe5\x69\x3f\x3d\xcc\xce\x3e\xbd\xbd\xca\x2f\x5e\x64\x17\x67\x93\xc1\xf2\xe2\xed\x55\xf4\x6e\xd2\xbf\x5d\x91\x9f\x43\x78\x4c\x50\x0d\xc6\xe4\x65\xdc\x70\x8b\x82\x51\xb8\x87\x8c\xc8\x98\x71\x47\x8b\x7c\x08\x9d\x5e\xbe\x3a\x81\x87\x86\x9b\x08\x2d\x05\x75\xc2\x42\x6b\xc1\xe1\x1e\x72\x42\x29\xe3\xf1\x10\x0e\x7d\x23\x11\x15\x52\x09\x39\x84\x5c\x18\x20\xf2\x64\x5f\x89\xff\x23\x25\xc3\x44\x2c\x50\xc2\xfd\xf7\x67\x67\x2c\xd5\x28\x87\x10\x4a\x16\x27\x9a\xa3\x52\xcd\x41\xef\x5f\x2d\xa3\xe2\x97\x5a\x45\x2a\xe2\x9f\x78\xfa\x8b\x66\xf9\x4f\x58\x25\x58\xaf\x46\x6b\x3a\xc3\xdb\xb4\xc6\x28\x14\x74\x5d\xa7\x96\xb2\x05\x44\x29\x51\x2a\xb0\x4c\x47\x12\xc6\x51\xd6\x69\xdf\xe7\x96\xe1\x22\x29\x4a\x5d\xfd\x75\x18\x9f\x09\x13\x5d\xca\x16\x5b\xf9\x08\x0d\xa6\xcd\xd6\x74\x63\xc7\xf4\x1f\x4c\xdd\x6b\x77\xe2\x8e\xbc\xa4\xb3\xcb\x3b\x1a\x8f\x30\x1b\x57\x6d\x19\xae\xe1\x13\x4b\xd3\x91\x87\xd9\x78\xe4\x25\x47\x3b\x72\x3b\x4e\x48\xb1\xb4\x1e\x39\xdf\x03\x48\x9d\x8c\x3a\x5d\x30\x0b\x95\x39\xc7\x4f\x64\xab\xf4\xe7\x84\x7f\x47\x35\xbf\x5a\x49\xa8\x39\x84\x9a\x97\xf0\xca\x45\x98\x8a\xe8\x0e\xf6\x92\x69\xfd\x50\x01\x25\x9a\x38\x51\xa1\xb4\xc8\x50\x06\x56\xe7\xb0\x6b\x8d\xa7\x24\x4a\x30\xb5\x15\xfc\x96\x0a\x49\x52\x98\xa0\x62\x31\x57\x23\xcf\xb8\xf1\x04\xc9\x6e\x24\xff\xee\xe0\xba\x2f\x0e\xad\xf1\x2b\x5c\x30\x0e\xaf\x19\x87\x11\xcb\x62\xa8\x06\xb9\xd5\xf1\xfd\x7c\x65\x41\x82\xa6\x9c\xb7\xdb\xfd\xd9\x81\x94\x11\x37\x65\x9b\x99\x41\x33\xe5\xb1\x8c\xc4\xe8\x9d\xf5\x8e\xfd\xee\xe9\xfb\x4b\xf6\xf6\x35\x57\x9f\x98\xe3\xfb\xef\xbd\x5c\x8a\x19\x4b\xd1\xa1\x4c\xe5\x29\x59\xe7\x89\xd0\xc2\x51\x89\x64\xfc\xee\xeb\xc0\xf7\xcd\xe3\xf9\xbf\x62\xd0\xe9\x75\x7b\xbd\x41\xff\xd0\xf7\x9f\x2f\x82\x10\x35\x79\xae\x83\xb3\x55\xf7\xf4\x7c\xb2\x38\x7a\x75\x7e\x48\x9c\xa3\x41\xbc\xb8\xfc\x3a\x5f\x5e\xd3\x17\x37\x5f\x7f\x97\xca\x39\xfd\xfd\xbd\x43\xef\x66\xf4\xaa\x7f\x7b\x57\x4e\x0a\x96\xc5\xe3\x7f\x7c\x6e\xfa\xdd\x8e\x35\x7e\x49\x72\xc2\x51\xa1\xa9\x38\x94\xfa\x9f\x5f\x71\xbd\xe3\xbe\x35\x3e\xcd\xc8\x9f\x8c\xc7\x70\x26\x66\x33\x44\x98\x0a\xa2\x34\xca\xbf\x02\xee\xe9\xd6\xe0\x64\x34\xb0\x34\xcb\xad\xf1\x59\xca\xa2\x3b\x10\x1c\x36\xe6\xca\xb7\x15\x20\xa1\x58\x20\x68\x01\x42\x52\x94\x40\x20\x22\xd2\xfd\x99\xa2\xc7\x51\x6d\x6d\xb0\xa7\x48\xe8\xd3\x09\xe9\xed\x8e\xc8\x2d\x6b\xe4\x55\x23\xb9\xb1\xbd\x6c\xc7\x8d\xc6\xac\xe0\x91\x66\x82\xc3\x4c\xc8\x8c\xe8\x49\x21\x89\xd9\x36\x69\xbd\x68\xc1\x7d\x03\x60\x41\x24\x50\x08\x60\x43\x05\x0f\x9a\x1d\xbf\xfc\xc1\xbf\xa1\x53\xfd\x3b\xf6\x5b\x27\xb5\x6c\xc1\x99\x56\x10\x80\x9d\x31\x6e\x1b\xa2\x44\x5d\x48\x0e\x6f\x88\x4e\x5c\x29\x0a\x4e\x9b\xb4\x05\xed\x4a\xee\xa4\xf1\xd0\x68\x98\x53\x51\xca\x90\xeb\x0f\x1f\xae\x26\x10\xec\x8a\x56\x4b\xc2\xa9\xc8\x9a\xad\xda\x9e\xb1\x65\xce\xa4\x44\xe9\x29\x7e\x2b\x50\xe9\xf2\x98\x7f\xd2\x68\x3c\x6b\x5a\xe5\xc5\x6b\xb5\x5c\xf3\xf2\xd8\xb4\x3e\x8b\x42\xc2\x12\xc3\xda\x82\xad\x80\xd1\xa1\xb9\xa4\xa5\xe0\xf1\xd8\x82\xf6\xae\xe9\x36\x58\xe6\x46\xab\x58\xad\x5a\xdd\x7e\x29\xb5\xdc\xc8\x24\xb3\xb9\x09\x5e\x13\x17\xba\x0a\xd4\x9e\x3b\xed\xf6\x26\x1e\x72\xc7\xc3\x7d\x53\x8e\xb1\xbe\x77\x6a\x73\x66\x26\x51\x25\x67\x44\x42\x00\xcf\x9a\xcf\x9a\xd6\xce\x3d\x6d\xb5\xdc\x5c\x62\x8e\x9c\x36\xed\xdd\x66\x2a\x8f\x38\x11\x91\x56\x79\xe9\x4d\x98\xca\x89\x8e\x12\x53\xcc\x55\x5d\xb9\xee\x1f\x12\xbf\x0d\xc1\x6e\x6f\x3d\x6a\xdb\x5f\xea\xfb\xd0\x94\x89\xdd\x72\xa3\x84\xa5\x54\x22\x6f\xb6\xfe\xf0\xbf\x6c\x33\xba\x2d\xda\x00\x70\xa1\x5d\x4d\x64\x8c\xda\x35\xed\xa3\x50\xbb\x1b\xae\x91\x36\x2f\x00\x28\x4d\xf6\xef\xeb\x7a\xb4\xe7\x04\x63\x94\x4e\x48\xe2\x98\xc4\x68\x0f\xc1\x56\xa8\x14\x13\x3c\xb0\x9f\xc6\xde\x3e\xd8\x04\xab\xe4\x6d\xdd\x6c\x00\x3c\x18\xed\x91\xe0\x4a\xa4\xe8\xa6\x22\x6e\xd6\x96\xb6\x3e\x86\x38\x13\x12\x21\x80\x09\xd1\xe8\x72\xb1\x6c\x96\xac\x67\x2e\x99\x93\x55\xd3\xf6\x68\x1d\x8f\x5f\xb7\x0d\x5f\x9a\xdf\x20\x6b\x83\xfd\x9c\x0b\xae\xb0\x24\xef\x15\xdd\x41\x8d\xa5\xb6\x38\xdc\x2c\x0e\x4a\x6a\x86\x3a\x11\x74\x08\xf6\xc5\xf9\xad\x5d\x91\x54\x11\x45\xa8\xd4\x10\xb6\x25\x62\x42\x75\x00\x1a\x57\xfa\x46\x13\x5d\xa8\xd6\x36\x3c\xc6\x75\x32\xd3\x65\x6c\xf7\x3d\x2f\x47\xdc\x0e\x60\xa3\x63\xcb\x28\x7b\x72\xd3\x8f\xc1\x77\xfd\x4b\x34\x71\xcf\x6f\x4f\xb7\xe2\x9b\x72\xaa\x5a\xc2\xae\x3f\x58\x46\xe1\xd8\x80\x2d\xa5\x27\x92\x2d\xaa\x30\x8c\xbc\x70\x0c\x44\x4a\xb6\x30\xa5\xc3\x38\x94\x32\x1b\x5b\x6d\xb0\xa1\x2e\xa3\xdd\x0c\x55\xc9\x4b\x89\x46\x1e\xad\x2b\x5e\xb3\x84\xe5\x54\x79\x31\xfd\x6e\x67\xea\x8b\x5d\xbb\xf4\x60\x22\xf5\xd0\x3a\x69\x98\xa7\x1c\x4f\xdb\xa1\x34\xf2\xaa\x8f\xbe\xff\x05\x00\x00\xff\xff\xf7\x1e\x80\xb3\xfc\x0d\x00\x00")

func web_assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_web_assetsIndexHtml,
		"web_assets/index.html",
	)
}

func web_assetsIndexHtml() (*asset, error) {
	bytes, err := web_assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web_assets/index.html", size: 3580, mode: os.FileMode(420), modTime: time.Unix(1530146662, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"web_assets/index.html": web_assetsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"web_assets": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{web_assetsIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
